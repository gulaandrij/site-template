security:
  encoders:
    FOS\UserBundle\Model\UserInterface: argon2i

  role_hierarchy:
    ROLE_ADMIN_CONTENT:     ROLE_USER
    ROLE_ADMIN:             ROLE_ADMIN_CONTENT
    ROLE_SUPER_ADMIN:       ROLE_ADMIN

  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    #        in_memory: { memory: ~ }
    fos_userbundle:
      id: fos_user.user_provider.username_email
  firewalls:
    refresh:
      pattern:  ^/api/token/refresh
      stateless: true
      anonymous: true

    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    login:
      pattern:  ^/api/login
      stateless: true
      anonymous: true
      json_login:
        check_path:               /api/login_check
        success_handler:          lexik_jwt_authentication.handler.authentication_success
        failure_handler:          lexik_jwt_authentication.handler.authentication_failure
    api:
      pattern:   ^/api/profile
      stateless: true
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator

    main:
      stateless: true
      pattern: ^/
      form_login:
        provider: fos_userbundle
        csrf_token_generator: security.csrf.token_manager
      logout:       true
      anonymous:    true
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator
      #            oauth:
      #                resource_owners:
      #                    facebook:           "/login/aouth/check-facebook"
      #                login_path:        /login/aouth
      #                failure_path:      /login/aouth
      #                #                success_path:      /
      #                oauth_user_provider:
      #                    #this is my custom user provider, created from FOSUBUserProvider - will manage the
      #                    #automatic user registration on your site, with data from the provider (facebook. google, etc.)
      #                    service: my_user_provider
      #                success_handler:          lexik_jwt_authentication.handler.authentication_success
      #                failure_handler:          lexik_jwt_authentication.handler.authentication_failure
      # activate different ways to authenticate

      # http_basic: true
      # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

      # form_login: true
      # https://symfony.com/doc/current/security/form_login_setup.html

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/token/refresh, roles: IS_AUTHENTICATED_ANONYMOUSLY }
